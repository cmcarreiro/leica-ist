<project xmlns="http://maven.apache.org/POM/4.0.0" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>pt.tecnico.bicloin.A52</groupId>
		<artifactId>Bicloin</artifactId>
		<version>1.0.0-SNAPSHOT</version>
	</parent>

	<artifactId>app</artifactId>
	<packaging>jar</packaging>
	<name>${project.artifactId}</name>

	<!-- Properties are variables used to customize the behavior of Maven and its plug-ins. -->
	<properties>
		<mainclass>pt.tecnico.bicloin.app.AppMain</mainclass>
	</properties>

	<!-- Dependencies are code archives - JARs - on which your current module needs in order to compile, build, test, and/or to run. 
		When you execute a goal, these dependencies are resolved, and are then loaded from the local repository. -->
	<dependencies>
		<!-- contract brings gRPC dependencies with it -->
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>hub-contract</artifactId>
			<version>1.0.0-SNAPSHOT</version>
		</dependency>
		<!-- tester brings front-end -->
		<dependency>
			<groupId>pt.tecnico.bicloin.A52</groupId>
			<artifactId>hub-tester</artifactId>
			<version>1.0.0-SNAPSHOT</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>

	<build>
		<!-- Resources are files like properties, images, etc; used by the module.  -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>
		<!-- Plug-ins allow for the reuse of common build logic across multiple projects. 
		They do this by executing an "action" in the context of a project's description. -->
		<plugins>
			<!-- The Resources plug-in handles the copying of project resources to the output directory. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${version.maven-resources-plugin}</version>
				<configuration>
					<nonFilteredFileExtensions>
						<nonFilteredFileExtension>jks</nonFilteredFileExtension>
					</nonFilteredFileExtensions>
				</configuration>
			</plugin>
			<!-- The Failsafe plug-in runs integration tests. -->
			<plugin>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>${version.maven-failsafe-plugin}</version>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- The Exec plug-in allows us to execute system and Java programs. -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>${version.exec-maven-plugin}</version>
				<executions>
					<execution>
						<goals>
							<goal>java</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<mainClass>${mainclass}</mainClass>
					<arguments>
						<argument>localhost</argument>
						<argument>2181</argument>
						<argument>alice</argument>
						<argument>+35191102030</argument>
						<argument>38.7380</argument>
						<argument>-9.3000</argument>
					</arguments>
				</configuration>
			</plugin>
			<!-- The Application Assembler plug-in generates scripts for starting Java applications. 
				All dependencies and the artifact of the project itself are placed in a generated Maven repository in a defined assemble directory. -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>appassembler-maven-plugin</artifactId>
				<version>${version.appassembler-maven-plugin}</version>
				<executions>
					<execution>
						<phase>install</phase>
						<goals>
							<goal>assemble</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<programs>
						<program>
							<mainClass>${mainclass}</mainClass>
							<id>${project.artifactId}</id>
						</program>
					</programs>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
